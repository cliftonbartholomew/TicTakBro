/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import backend.BroConstants;
import backend.Client;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Cliftonb
 */
public class GameScreen extends javax.swing.JFrame implements BroConstants, Runnable {

	//Added a comment
	private CellPanel[] panels = new CellPanel[9];
	private Client client;
	private boolean connected = false;

	/**
	 * Creates new form GameScreen
	 */
	public GameScreen() {
		initComponents();
		gamePanel.setLayout(new GridLayout(3, 3));
		gamePanel.setPreferredSize(new Dimension(300, 300));
		//setup the play area grid
		for (int i = 0; i < panels.length; i++) {
			panels[i] = new CellPanel(i);
			gamePanel.add(panels[i]);
		}
		setLocationRelativeTo(null);

	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                titleLabel = new javax.swing.JLabel();
                jScrollPane1 = new javax.swing.JScrollPane();
                serverTextArea = new javax.swing.JTextArea();
                serverHeadingLabel = new javax.swing.JLabel();
                nameTextField = new javax.swing.JTextField();
                nameLabel = new javax.swing.JLabel();
                gamePanel = new javax.swing.JPanel();
                connectButton = new javax.swing.JButton();
                exitButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                titleLabel.setFont(new java.awt.Font("Goudy Stout", 0, 24)); // NOI18N
                titleLabel.setText("TicTacBro");

                serverTextArea.setEditable(false);
                serverTextArea.setColumns(20);
                serverTextArea.setRows(5);
                jScrollPane1.setViewportView(serverTextArea);

                serverHeadingLabel.setFont(new java.awt.Font("Goudy Stout", 0, 8)); // NOI18N
                serverHeadingLabel.setText("Messages from Server");

                nameLabel.setFont(new java.awt.Font("Goudy Stout", 0, 12)); // NOI18N
                nameLabel.setText("Name:");

                javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
                gamePanel.setLayout(gamePanelLayout);
                gamePanelLayout.setHorizontalGroup(
                        gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                );
                gamePanelLayout.setVerticalGroup(
                        gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                );

                connectButton.setText("Connect");
                connectButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                connectButtonActionPerformed(evt);
                        }
                });

                exitButton.setText("Exit");
                exitButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nameTextField))
                                        .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(30, 30, 30)
                                                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(40, 40, 40))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(30, 30, 30))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(serverHeadingLabel)
                                                .addGap(110, 110, 110))))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(15, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(serverHeadingLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(nameLabel)
                                        .addComponent(connectButton)
                                        .addComponent(exitButton))
                                .addGap(30, 30, 30))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
		// TODO add your handling code here:
		System.exit(WIDTH);
        }//GEN-LAST:event_exitButtonActionPerformed

        private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
		if (nameTextField.getText().isEmpty()) {
			JOptionPane.showMessageDialog(this, "Please enter your username and try connect again");
		} else if (!connected) {

			//reset the panels from the previous game
			for (CellPanel p : panels) {
				p.setToken(' ');
			}

			log("trying to connect " + nameTextField.getText() + " to server.");
//				client = new Client(nameTextField.getText());
			client = new Client();
			nameTextField.setEditable(false);//cannot change name once connected
			//add actionlisteners with backlinks to the client the play area grid
			for (int i = 0; i < panels.length; i++) {
				panels[i].addMouseListener(new MouseAdapter() {

					//add a click listener to each of the game panels
					public void mouseClicked(MouseEvent e) {
						CellPanel panelClicked = (CellPanel) (e.getComponent());
						if (panelClicked.getToken() == ' ' && client.isWaitingForAction() && !client.isWaitingForOpponent()) {
							panelClicked.setToken(client.getToken());
							try {
								client.sendMoveToServer(panelClicked.getCellIndex());
								log("waiting for opponent.");
							} catch (IOException ex) {
								System.out.println(ex);
								log("could not send move to server.");
							}
						} else if (client.isWaitingForOpponent()) {
							log("waiting for opponent.");

						} else if (client.isGameOver()) {
							log("game is over.");

						}

					}
				});
			}

			//start a new thread here
			Thread thread = new Thread(this);
			thread.start();
		}
        }//GEN-LAST:event_connectButtonActionPerformed

	private void log(String s) {
		System.out.println(new Date() + ": " + s);

		serverTextArea.append(new Date() + ": " + s + "\n");
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		System.out.println("test");

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GameScreen().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton connectButton;
        private javax.swing.JButton exitButton;
        private javax.swing.JPanel gamePanel;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JLabel nameLabel;
        private javax.swing.JTextField nameTextField;
        private javax.swing.JLabel serverHeadingLabel;
        private javax.swing.JTextArea serverTextArea;
        private javax.swing.JLabel titleLabel;
        // End of variables declaration//GEN-END:variables

	@Override
	public void run() {
		try {
			client.connectToServer();
			log("connected!");
			connected = true;
			if (client.getToken() == PLAYER_ONE) {
				log("you are player 1");
				log("waiting for player 2 to connect.");
				client.getFirstContact();
				log("player 2 joined, you may make your first move.");
			} else {
				log("you are player 2");
				log("waiting for player 1 to move");
			}

			while (!client.isGameOver()) {
				try {
					if (client.getToken() == PLAYER_ONE) {
						client.waitForPlayerAction();
						client.receiveStatusFromServer();
						//there might not always be a move
						makeOpponentMove();
						displayResult();
					} else {
						client.receiveStatusFromServer();
						//there might not always be a move
						makeOpponentMove();
						displayResult();
						client.waitForPlayerAction();

					}
				} catch (InterruptedException e) {
					System.out.println(e);
				}
			}

		} catch (IOException ex) {
			Logger.getLogger(GameScreen.class.getName()).log(Level.SEVERE, null, ex);
		}

		connected = false;

	}

	private void makeOpponentMove() {
		if (client.isWaitingForAction() || client.getGameResult() == LOSE) {
			if (client.getToken() == PLAYER_ONE) {
				panels[client.getOpponentNextMove()].setToken(PLAYER_TWO);
			} else {
				panels[client.getOpponentNextMove()].setToken(PLAYER_ONE);
			}

		}
		if (client.getToken() == PLAYER_TWO && client.getGameResult() == DRAW) {
			panels[client.getOpponentNextMove()].setToken(PLAYER_ONE);
		}
	}

	private void displayResult() {
		if (client.isGameOver()) {
			String winStr = switch (client.getGameResult()) {
				case WIN ->
					"You win!!";
				case LOSE ->
					"You lose!!";
				default ->
					"Its a draw!!";
			};
			log("Game over. " + winStr);
		} else {
			log("Its your move");
		}
	}
}
